<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="com.xupt.dao.EmployeeMapperDynamicSQL">
 <cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024"></cache>
 <!-- 
 	eviction:缓存的回收策略
 	flushInterval:缓存刷新间隔，即缓存多久清空一次，默认不清空
 	readOnly:是否只读   只读：mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。mybatis为加快速度，直接将数据在缓存中的引用交给用户，不安全，速度快。
 					  非只读：mybatis觉得数据可能会被修改。会利用序列化或反序列化克隆一份新数据给用户
 	size：缓存存放多少元素
 	type：指定自定义缓存的全类名，实现C	ache接口即可
  -->
 <!-- 测试if -->
<!-- 	<select id="getEmpsByConditionIf" resultType="com.xupt.bean.Employee">
		select * from employee where <if test="id!=null">id=#{id}</if>
									 <if test="lastName!=null and lastName!=''"> and last_name like #{lastName}</if>
									 <if test="email!=null and email.trim()!=''"> and email=#{email}</if>
									 <if test="gender==0 or gender==1"> and gender=#{gender}</if>
	</select> -->
<!-- 测试where -->
	<select id="getEmpsByConditionIf" resultType="employee">
		select * from employee <where><if test="id!=null">id=#{id}</if>
									 <if test="lastName!=null and lastName!=''"> and last_name like #{lastName}</if>
									 <if test="email!=null and email.trim()!=''"> and email=#{email}</if>
									 <if test="gender==0 or gender==1"> and gender=#{gender}</if>
									 </where>
	</select>
<!-- 测试trim -->
	<select id="getEmpsByConditionTrim" resultType="employee">
		select * from employee <trim prefix="where" suffixOverrides="and"><if test="id!=null">id=#{id} and</if>
									 <if test="lastName!=null and lastName!=''"> last_name like #{lastName} and</if>
									 <if test="email!=null and email.trim()!=''"> email=#{email} and</if>
									 <if test="gender==0 or gender==1"> gender=#{gender}</if>
									 </trim>
	</select>
<!-- 测试choose -->
	<select id="getEmpsByConditionChoose" resultType="employee">
		select * from employee 
		<where>
			<choose>
				<when test="id!=null">
					id=#{id}
				</when>
				<when test="lastName!=null">
					last_name like #{lastName}
				</when>
				<when test="email!=null">
					email=#{email}
				</when>
				<otherwise>
					gender = 0
				</otherwise>
			</choose>			
		</where>
	</select>
<!-- 测试set -->
	<update id="updateEmp">
		update employee
		<trim prefix="set" suffixOverrides=",">
		<if test="lastName!=null"> last_name=#{lastName},</if>
		<if test="email!=null">email=#{email},</if>
		<if test="gender!=null">gender=#{gender}</if>
		</trim>
		where id=#{id} 
	</update>
<!-- 测试foreach -->
	<select id="getEmpsByConditionForeach" resultType="employee">
		select * from employee where id in 
		<foreach collection="ids" item="id" separator="," open="(" close=")">
			#{id}
		</foreach>
	</select>
<!-- foreach批量保存 -->
<!-- 	<insert id="addEmps">
		insert into employee(last_name,email,gender,d_id)
		values
		<foreach collection="emps" item="emp" separator=",">
			(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
		</foreach>
	</insert>  -->
<!-- 批量保存2 -->
	<insert id="addEmps">
		<foreach collection="emps" item="emp" separator=";">
			insert into employee(last_name,email,gender,d_id) values(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
		</foreach>
	</insert>
	<select id="getEmpById" resultType="employee">
		select * from employee where id=#{id}
	</select>
 </mapper>